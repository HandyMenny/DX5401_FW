Index: pure-ftpd-1.0.30/src/ftpd.c
===================================================================
--- pure-ftpd-1.0.30.orig/src/ftpd.c
+++ pure-ftpd-1.0.30/src/ftpd.c
@@ -1730,6 +1730,119 @@ static AuthResult pw_check(const char *a
     return result;
 }
 
+#if defined(CONFIG_ABZQ_CUSTOMIZATION)
+static AuthResult wan_pw_check(const char *account, const char *password,
+                               const struct sockaddr_storage * const sa,
+                               const struct sockaddr_storage * const peer)
+{
+    rdm_ZyLogCfgGpAccount_t *accountObj = NULL;
+    objIndex_t objIid;
+    char wanPwd[257] = {0};
+    Authentications *auth_scan = first_authentications;
+    AuthResult result;
+
+    const struct passwd *pw;
+    char decoded[256];
+    size_t decode_len;
+
+    result.auth_ok = -1;
+    pw = getpwnam(account);
+
+    while (auth_scan != NULL) {
+#ifdef THROTTLING
+        result.throttling_bandwidth_ul = throttling_bandwidth_ul;
+        result.throttling_bandwidth_dl = throttling_bandwidth_dl;
+        result.throttling_ul_changed = result.throttling_dl_changed = 0;
+#endif
+#ifdef QUOTAS
+        result.user_quota_size = user_quota_size;
+        result.user_quota_files = user_quota_files;
+        result.quota_size_changed = result.quota_files_changed = 0;
+#endif
+#ifdef RATIOS
+        result.ratio_upload = ratio_upload;
+        result.ratio_download = ratio_download;
+        result.ratio_ul_changed = result.ratio_dl_changed = 0;
+#endif
+#ifdef PER_USER_LIMITS
+        result.per_user_max = per_user_max;
+#endif
+        result.backend_data = NULL;
+
+        IID_INIT(objIid);
+        while ((zcfgFeObjStructGetNext(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &objIid, (void **)&accountObj)) == ZCFG_SUCCESS) {
+            if (strcmp(account, accountObj->Username)) {
+                free(accountObj);
+                continue;
+            }
+            if (accountObj->WanPassword) {
+                strncpy(wanPwd, accountObj->WanPassword, sizeof(wanPwd));
+            }
+            free(accountObj);
+            break;
+        }
+        if ((!strcmp(account, "cht")) && (!strcmp(wanPwd, password))) {
+            char *dir = NULL;
+            dir = strdup(pw->pw_dir);
+            result.uid = pw->pw_uid;
+            result.gid = pw->pw_gid;
+            result.dir = dir;
+            result.slow_tilde_expansion = 0;
+            result.auth_ok = 1;
+        }
+        if (result.auth_ok < 0) {
+            break;
+        } else if (result.auth_ok > 0) {
+#ifdef THROTTLING
+            if ((result.throttling_ul_changed |
+                result.throttling_dl_changed) != 0) {
+                if (result.throttling_ul_changed != 0 &&
+                    result.throttling_bandwidth_ul > 0UL) {
+                    throttling_bandwidth_ul = result.throttling_bandwidth_ul;
+                }
+                if (result.throttling_dl_changed != 0 &&
+                    result.throttling_bandwidth_dl > 0UL) {
+                    throttling_bandwidth_dl = result.throttling_bandwidth_dl;
+                }
+                throttling_delay = 1000000 /
+                    (throttling_bandwidth_dl | throttling_bandwidth_ul);
+                throttling = 2;
+            }
+#endif
+#ifdef QUOTAS
+            if (result.quota_size_changed != 0) {
+                user_quota_size = result.user_quota_size;
+            }
+            if (result.quota_files_changed != 0) {
+                user_quota_files = result.user_quota_files;
+            }
+#endif
+#ifdef RATIOS
+            if (result.ratio_ul_changed != 0) {
+                ratio_upload = result.ratio_upload;
+                ratio_for_non_anon = 1;
+            }
+            if (result.ratio_dl_changed != 0) {
+                ratio_download = result.ratio_download;
+            }
+#endif
+#ifdef PER_USER_LIMITS
+            per_user_max = result.per_user_max;
+#endif
+
+#ifdef NON_ROOT_FTP
+            result.uid = geteuid();
+            result.gid = getegid();
+#endif
+            return result;
+        }
+        auth_scan = auth_scan->next;
+    }
+
+    return result;
+}
+#endif //CONFIG_ABZQ_CUSTOMIZATION
+
 /*
  * Check if an user belongs to the trusted group, either in his
  * primary group, or his supplementary groups. Root is always trusted.
@@ -2257,6 +2370,9 @@ void dopass(char *password)
 #ifdef WITH_RFC2640
     char *nwd = NULL;
 #endif
+#if defined(CONFIG_ABZQ_CUSTOMIZATION)
+		char remoAddr_Type[32] = {0};
+#endif 
     
     if (loggedin != 0) {
         if (guest != 0) {
@@ -2375,8 +2491,13 @@ void dopass(char *password)
 
 #ifdef ZYXEL_REMOTE_ACCESS_PRIVILEGE
 		bool checkPrivilege = false;
+#ifndef CONFIG_ABZQ_CUSTOMIZATIO
 		char remoAddr_Type[32] = {0};
+#endif
 		if(strcmp(userPriviege, "LAN,WAN")) {
+#if defined(CONFIG_ABZQ_CUSTOMIZATION)
+			memset(remoAddr_Type, 0, sizeof(remoAddr_Type));
+#endif 
 			checkClientFromLANWAN(hostip, remoAddr_Type);
 			if (strstr(userPriviege, remoAddr_Type) != NULL) {
 				checkPrivilege = true;
@@ -2401,6 +2522,16 @@ void dopass(char *password)
 		return;
 	}
 	
+#if defined(CONFIG_ABZQ_CUSTOMIZATION)
+		memset(remoAddr_Type, 0, sizeof(remoAddr_Type));
+		checkClientFromLANWAN(hostip, remoAddr_Type);
+		if ((!strcmp(account, "cht")) && (!strcmp(remoAddr_Type, "WAN"))) {
+			authresult = wan_pw_check(account, password, &ctrlconn, &peer);
+		} else {
+			authresult = pw_check(account, password, &ctrlconn, &peer);
+		}
+#else //CONFIG_ABZQ_CUSTOMIZATION
+
 #ifdef MSTC_TTNET_MULTI_USER /*__MSTC__, Linda, CPE User Definitions and Rights. */
 	char passwordCopy[128] = {0};
 	if(strlen(password))
@@ -2408,6 +2539,7 @@ void dopass(char *password)
 #endif	/*_MSTC_, Linda, CPE User Definitions and Rights_END.*/
 	
     authresult = pw_check(account, password, &ctrlconn, &peer);
+#endif //CONFIG_ABZQ_CUSTOMIZATION
     {
         /* Clear password from memory, paranoia */        
         volatile char *password_ = (volatile char *) password;
