Index: ebtables-v2.0.8-2/Makefile
===================================================================
--- ebtables-v2.0.8-2.orig/Makefile
+++ ebtables-v2.0.8-2/Makefile
@@ -66,6 +66,10 @@ else ifeq ($(CONFIG_TC_SDK_VERSION),"7.3
 CFLAGS += -DCONFIG_TC_SDK_7_3_267_750
 endif
 
+ifeq ($(CONFIG_ABZQ_CUSTOMIZATION),y)
+CFLAGS += -DCONFIG_ABZQ_CUSTOMIZATION
+endif
+
 include extensions/Makefile
 
 OBJECTS2:=getethertype.o communication.o libebtc.o \
Index: ebtables-v2.0.8-2/extensions/ebt_ip6.c
===================================================================
--- ebtables-v2.0.8-2.orig/extensions/ebt_ip6.c
+++ ebtables-v2.0.8-2/extensions/ebt_ip6.c
@@ -36,6 +36,10 @@
 #if 1 /* ZyXEL QoS, John (porting from MSTC)*/
 #define IP_LENGTH '7'
 #endif
+#ifdef CONFIG_ABZQ_CUSTOMIZATION
+#define IP_ICMP6  '8'
+#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
+#endif
 
 static const struct option opts[] =
 {
@@ -55,9 +59,58 @@ static const struct option opts[] =
 	{ "ip6-length"           , required_argument, 0, IP_LENGTH  },
 	{ "ip6-len"            	, required_argument, 0, IP_LENGTH  },
 #endif
+#ifdef CONFIG_ABZQ_CUSTOMIZATION
+	{ "ip6-icmp-type"		 , required_argument, 0, IP_ICMP6  },
+#endif
 	{ 0 }
 };
 
+#ifdef CONFIG_ABZQ_CUSTOMIZATION
+struct icmpv6_names {
+	const char *name;
+	u_int8_t type;
+	u_int8_t code_min, code_max;
+};
+
+static const struct icmpv6_names icmpv6_codes[] = {
+	{ "destination-unreachable", 1, 0, 0xFF },
+	{ "no-route", 1, 0, 0 },
+	{ "communication-prohibited", 1, 1, 1 },
+	{ "address-unreachable", 1, 3, 3 },
+	{ "port-unreachable", 1, 4, 4 },
+
+	{ "packet-too-big", 2, 0, 0xFF },
+
+	{ "time-exceeded", 3, 0, 0xFF },
+	/* Alias */ { "ttl-exceeded", 3, 0, 0xFF },
+	{ "ttl-zero-during-transit", 3, 0, 0 },
+	{ "ttl-zero-during-reassembly", 3, 1, 1 },
+
+	{ "parameter-problem", 4, 0, 0xFF },
+	{ "bad-header", 4, 0, 0 },
+	{ "unknown-header-type", 4, 1, 1 },
+	{ "unknown-option", 4, 2, 2 },
+
+	{ "echo-request", 128, 0, 0xFF },
+	/* Alias */ { "ping", 128, 0, 0xFF },
+
+	{ "echo-reply", 129, 0, 0xFF },
+	/* Alias */ { "pong", 129, 0, 0xFF },
+
+	{ "router-solicitation", 133, 0, 0xFF },
+
+	{ "router-advertisement", 134, 0, 0xFF },
+
+	{ "neighbour-solicitation", 135, 0, 0xFF },
+	/* Alias */ { "neighbor-solicitation", 135, 0, 0xFF },
+
+	{ "neighbour-advertisement", 136, 0, 0xFF },
+	/* Alias */ { "neighbor-advertisement", 136, 0, 0xFF },
+
+	{ "redirect", 137, 0, 0xFF },
+};
+#endif
+
 /* transform a protocol and service name into a port number */
 static uint16_t parse_port(const char *protocol, const char *name)
 {
@@ -141,6 +194,114 @@ parse_range(const char *str, long min, l
 	return next;
 }
 
+#ifdef CONFIG_ABZQ_CUSTOMIZATION
+static int
+parse_icmpv6(const char *icmpv6type, uint8_t type[], uint8_t code[])
+{
+	unsigned int limit = ARRAY_SIZE(icmpv6_codes);
+	unsigned int match = limit;
+	unsigned int i;
+	long number[2];
+
+	for (i = 0; i<  limit; i++) {
+		if (strncasecmp(icmpv6_codes[i].name, icmpv6type, strlen(icmpv6type)))
+			continue;
+		if (match != limit)
+			ebt_print_error("Ambiguous ICMPv6 type `%s':"
+					" `%s' or `%s'?",
+					icmpv6type, icmpv6_codes[match].name,
+					icmpv6_codes[i].name);
+		match = i;
+	}
+
+	if (match<  limit) {
+		type[0] = type[1] = icmpv6_codes[match].type;
+		code[0] = icmpv6_codes[match].code_min;
+		code[1] = icmpv6_codes[match].code_max;
+	} else {
+		char *next = parse_range(icmpv6type, 0, 255, number);
+		if (!next) {
+			ebt_print_error("Unknown ICMPv6 type `%s'",
+							icmpv6type);
+			return -1;
+		}
+		type[0] = (uint8_t) number[0];
+		type[1] = (uint8_t) number[1];
+		switch (*next) {
+		case 0:
+			code[0] = 0;
+			code[1] = 255;
+			return 0;
+		case '/':
+			next = parse_range(next+1, 0, 255, number);
+			code[0] = (uint8_t) number[0];
+			code[1] = (uint8_t) number[1];
+			if (next == NULL)
+				return -1;
+			if (next&&  *next == 0)
+				return 0;
+		/* fallthrough */
+		default:
+			ebt_print_error("unknown character %c", *next);
+			return -1;
+		}
+	}
+	return 0;
+}
+
+static void print_icmp_code(uint8_t *code)
+{
+	if (code[0] == code[1])
+		printf("/%"PRIu8 " ", code[0]);
+	else
+		printf("/%"PRIu8":%"PRIu8 " ", code[0], code[1]);
+}
+
+static void print_icmp_type(uint8_t *type, uint8_t *code)
+{
+	unsigned int i;
+
+	if (type[0] != type[1]) {
+		printf("%"PRIu8 ":%" PRIu8, type[0], type[1]);
+		print_icmp_code(code);
+		return;
+	}
+
+	for (i = 0; i<  ARRAY_SIZE(icmpv6_codes); i++) {
+		if (icmpv6_codes[i].type != type[0])
+			continue;
+
+		if (icmpv6_codes[i].code_min == code[0]&&
+		    icmpv6_codes[i].code_max == code[1]) {
+			printf("%s ", icmpv6_codes[i].name);
+			return;
+		}
+	}
+	printf("%"PRIu8, type[0]);
+	print_icmp_code(code);
+}
+
+static void print_icmpv6types(void)
+{
+	unsigned int i;
+        printf("Valid ICMPv6 Types:");
+
+	for (i=0; i<  ARRAY_SIZE(icmpv6_codes); i++) {
+		if (i&&  icmpv6_codes[i].type == icmpv6_codes[i-1].type) {
+			if (icmpv6_codes[i].code_min == icmpv6_codes[i-1].code_min
+			&&  (icmpv6_codes[i].code_max
+			        == icmpv6_codes[i-1].code_max))
+				printf(" (%s)", icmpv6_codes[i].name);
+			else
+				printf("\n   %s", icmpv6_codes[i].name);
+		}
+		else
+			printf("\n%s", icmpv6_codes[i].name);
+	}
+	printf("\n");
+}
+#endif
+
 static void print_port_range(uint16_t *ports)
 {
 	if (ports[0] == ports[1])
@@ -207,7 +368,12 @@ static void print_help()
 #if 1 /* ZyXEL QoS, John (porting from MSTC)*/
 "--ip6-len    [!] length[:length] : ip length or legth range\n"
 #endif
-);
+#ifdef CONFIG_ABZQ_CUSTOMIZATION
+"--ip6-icmp-type [!] type[[:type]/code[:code]] : ipv6-icmp type/code or type/code range\n");
+	print_icmpv6types();
+#else
+	);
+#endif
 }
 
 static void init(struct ebt_entry_match *match)
@@ -283,6 +449,17 @@ static int parse(int c, char **argv, int
 
 break;
 
+#ifdef CONFIG_ABZQ_CUSTOMIZATION
+    case IP_ICMP6:
+        ebt_check_option2(flags, EBT_IP6_ICMP6);
+        ipinfo->bitmask |= EBT_IP6_ICMP6;
+        if (ebt_check_inverse2(optarg))
+           ipinfo->invflags |= EBT_IP6_ICMP6;
+        if (parse_icmpv6(optarg, ipinfo->icmpv6_type, ipinfo->icmpv6_code))
+           return 0;
+        break;
+#endif
+
 	case IP_TCLASS:
 		ebt_check_option2(flags, OPT_TCLASS);
 		if (ebt_check_inverse2(optarg))
@@ -347,6 +524,15 @@ static void final_check(const struct ebt
 		ebt_print_error("For port filtering the IP protocol must be "
 				"either 6 (tcp), 17 (udp), 33 (dccp) or "
 				"132 (sctp)");
+
+#ifdef CONFIG_ABZQ_CUSTOMIZATION
+	if ((ipinfo->bitmask&  EBT_IP6_ICMP6)&&
+		(!(ipinfo->bitmask&  EBT_IP6_PROTO) ||
+		 ipinfo->invflags&	EBT_IP6_PROTO ||
+		 ipinfo->protocol != IPPROTO_ICMPV6))
+		ebt_print_error("For ipv6-icmp filtering the IP protocol must be "
+				"58 (ipv6-icmp)");
+#endif
 }
 
 static void print(const struct ebt_u_entry *entry,
@@ -412,6 +598,14 @@ static void print(const struct ebt_u_ent
 		print_length_range(ipinfo->length);
 	}
 #endif
+#ifdef CONFIG_ABZQ_CUSTOMIZATION
+	if (ipinfo->bitmask&  EBT_IP6_ICMP6) {
+		printf("--ip6-icmp-type ");
+		if (ipinfo->invflags&  EBT_IP6_ICMP6)
+			printf("! ");
+		print_icmp_type(ipinfo->icmpv6_type, ipinfo->icmpv6_code);
+	}
+#endif
 }
 
 static int compare(const struct ebt_entry_match *m1,
@@ -461,6 +655,15 @@ static int compare(const struct ebt_entr
 			return 0;
 	}
 #endif
+#ifdef CONFIG_ABZQ_CUSTOMIZATION
+	if (ipinfo1->bitmask&  EBT_IP6_ICMP6) {
+		if (ipinfo1->icmpv6_type[0] != ipinfo2->icmpv6_type[0] ||
+		    ipinfo1->icmpv6_type[1] != ipinfo2->icmpv6_type[1] ||
+		    ipinfo1->icmpv6_code[0] != ipinfo2->icmpv6_code[0] ||
+		    ipinfo1->icmpv6_code[1] != ipinfo2->icmpv6_code[1])
+			return 0;
+	}
+#endif
 	return 1;
 }
 
Index: ebtables-v2.0.8-2/include/linux/netfilter_bridge/ebt_ip6.h
===================================================================
--- ebtables-v2.0.8-2.orig/include/linux/netfilter_bridge/ebt_ip6.h
+++ ebtables-v2.0.8-2/include/linux/netfilter_bridge/ebt_ip6.h
@@ -25,12 +25,21 @@
 #define EBT_IP6_LENGTH 0x40
 #endif
 #endif
+#ifdef CONFIG_ABZQ_CUSTOMIZATION
+#define EBT_IP6_ICMP6 0x40
+#endif
 #if 1 /* ZyXEL QoS, John (porting from MSTC) */
+#if !defined(CONFIG_ABZQ_CUSTOMIZATION)
 #define EBT_IP6_MASK (EBT_IP6_SOURCE | EBT_IP6_DEST | EBT_IP6_TCLASS |\
 		      EBT_IP6_PROTO | EBT_IP6_SPORT | EBT_IP6_DPORT | \
 		      EBT_IP6_LENGTH)
 #else
 #define EBT_IP6_MASK (EBT_IP6_SOURCE | EBT_IP6_DEST | EBT_IP6_TCLASS |\
+		      EBT_IP6_PROTO | EBT_IP6_SPORT | EBT_IP6_DPORT | \
+		      EBT_IP6_ICMP6 | EBT_IP6_LENGTH)
+#endif
+#else
+#define EBT_IP6_MASK (EBT_IP6_SOURCE | EBT_IP6_DEST | EBT_IP6_TCLASS |\
 		      EBT_IP6_PROTO | EBT_IP6_SPORT | EBT_IP6_DPORT)
 #endif
 #define EBT_IP6_MATCH "ip6"
